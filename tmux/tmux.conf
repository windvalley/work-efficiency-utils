# tmux.conf by @windvalley
# https://raw.githubusercontent.com/windvalley/work-efficiency-utils/master/vim/tmux.conf


# vim: set foldmarker={{,}} foldlevel=0 foldmethod=marker:
#
# NOTE:
#   1. 查看折叠内容的方法:
#      za: normal 模式下按`za`, 表示当光标在关闭折叠上时打开之, 在打开折叠上时关闭之;
#          在打开的折叠内部任意处按`za`, 也会关闭折叠.
#      zA: 是`za`的递归操作, 是针对嵌套折叠的场景.
#
#   2. 下面注释中的所有快捷键, 都是必须先按 ctrl a 松手后再需要按的.


 --- 基础配置 {{

# r  source 加载配置文件 ~/.tmux.conf, 使立即生效.
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# e  新创建一个 tmux 窗口来打开 ~/.tmux.conf, 保存后会自动对配置文件进行 source.
bind e new-window -n "~/.tmux.conf" "EDITOR=\${EDITOR//mvim/vim} && EDITOR=\${EDITOR//gvim/vim} && \${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\""

# 添加新的 prefix 键: ctrl a, 默认的 ctrl b 不取消, 不推荐.
#set -g prefix2 C-a
#bind C-a send-prefix -2

# 重置 prefix 键为: ctrl a, 取消默认的 ctrl b 键.
# 由于 ctrl b 是命令行操作非常频繁使用的光标左移快捷键,
# 为了排除干扰, 所以取消掉默认的 prefix 映射;
# 虽然 ctrl a 也是命令行操作较常用的快捷键, 用于光标跳转到命令行起始位置,
# 但按键不是很频繁, 我们只需连续按2次 ctrl a 即可实现跳转, 影响不大.
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# 新建窗口时使用的默认终端.
# NOTE: 如果设置成 screen-256color, 会造成在 centos5.x 系统上无法使用 clear 命令.
set -g default-terminal xterm-256color

# 按完 prefix 键, 再按 esc 键, 多少毫秒后取消 prefix,
# 如果有计划把 esc 键也作为功能键的一部分时, 把这个时间设置的长一些才有意义,
# 否则直接设置为 0 即可.
set -s escape-time 0

# 按完 prefix 键和功能键后, 可只按功能键来实施相同的功能,
# 按键间隔时间超过这里设置的时间后就需要重新输入 prefix 键了.
# 比较适用于 resize 窗格的快捷键, 省去了频繁按 prefix 键的麻烦.
set -sg repeat-time 500

# 一个窗口最多保留多少条历史记录.
set -g history-limit 50000

# 支持使用鼠标切换窗口, 调整窗格大小等.
set -g mouse on

# 窗口和窗格编号从1开始, 默认是从0开始.
set -g base-index 1
setw -g pane-base-index 1

# 窗口自动重命名.
setw -g automatic-rename on

# 如果有窗口关闭, 对现有窗口进行重新编号.
set -g renumber-windows on

# 终端标签页设置标题.
set -g set-titles on

# 窗格信息的展示时间, 比如 q 命令展示窗格编号的显示时长, 单位毫秒.
set -g display-panes-time 1000

# 设置状态栏消息展示的时间, 单位毫秒.
set -g display-time 600

# 监控窗口活动, 活动的窗口在状态栏高亮显示.
set -g monitor-activity on

# 窗口活动信息使用在状态栏显示信息的方式替代响铃的方式.
set -g visual-activity on

# }}


# --- 窗口窗格操作按键映射 {{

# ctrl c  创建新的 session.
bind C-c new-session

# ctrl f  搜索 session.
bind C-f command-prompt -p find-session 'switch-client -t %%'

# k/j/h/l  光标向上/下/左/右边的窗格跳转.
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R

# >/<  和下一个/上一个窗格交换位置.
bind > swap-pane -D
bind < swap-pane -U

# H/J/K/L  向左/下/上/右 resize 窗格.
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# ctrl l  清空窗格屏幕的同时, 窗格的历史记录也被清除.
# NOTE: 注意和不加 prefix 的 ctrl l 的区别, 不加 prefix 的 ctrl l 只清空当前窗格的屏幕,
#       窗格的历史内容记录还是保留的, 可以通过进入 copy 模式后进行浏览.
bind C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# }}


# --- Copy 模式和 Sync 模式配置 {{

# copy 模式下, 使用 vi 或 emacs 的键位绑定, 默认值: emacs
# NOTE: 通过 [ 进入到 copy 模式, 按 q 可退出 copy 模式.
set -g status-keys vi
setw -g mode-keys vi

# copy 模式下, 使用 v 进行文本选择, 使用 V 可进行按行选择.
bind -T copy-mode-vi v send-keys -X begin-selection

# copy 模式下, 使用 ctrl v 进行矩形选择, 按完 ctrl v 后, 需要再按 v 进行选择.
bind -T copy-mode-vi C-v send -X rectangle-toggle

# copy 模式下, 使用 y 将选择的文本拷贝到系统剪贴板;
# 如果安装了 tmux-plugins/tmux-yank 插件, 这条可以不配置.
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# ctrl y  打开/关闭 sync 模式, 进入 sync 模式后, 如果一个窗口有多个窗格,
#         在其中一个窗格执行命令, 其他窗格同时会执行该命令, 被 t 时间覆盖的窗格除外.
bind -n C-y setw synchronize-panes

# }}


# --- 主题颜色配置 {{

# 窗口名称的颜色设置, 在状态栏显示.
setw -g window-status-style fg=colour244,bg=default,dim

# 当前活动窗口名称的颜色设置.
setw -g window-status-current-style fg=colour166,bg=default,bright

# 窗格边框颜色.
set -g pane-border-style fg=colour244

# 当前活动窗格边框颜色.
set -g pane-active-border-style fg=blue

# 窗格序号的颜色设置.
set -g display-panes-colour colour33

# 活动窗格序号的颜色设置.
set -g display-panes-active-colour colour166

# 消息的颜色设置.
set -g message-style bg=colour235,fg=colour166

# t 时钟的颜色设置.
setw -g clock-mode-colour green

# 新建 session 时, 是否默认开启状态栏, 默认值: on, 可选值: off
set -g status on

# ctrl S  显示与隐藏状态栏的快捷键设置.
bind S set status

# 状态栏信息更新间隔几秒钟.
set -g status-interval 2

# 状态栏的位置, 默认值: bottom, 可选值: top
set -g status-position bottom

# 状态栏信息位置调整, 默认值: left, 可选值: centre, right
set -g status-justify left

# 状态栏颜色设置.
set -g status-style bg=colour235,fg=colour136,default

# 状态栏左边信息的显示长度.
set -g status-left-length 40

# 状态栏右边信息的显示长度.
set -g status-right-length 140

# 状态栏左边显示的信息定制.
set -g status-left "#[fg=#CE0000,bold] ♥︎ #S "

# 状态栏右边显示的信息定制.
set -g status-right "#{prefix_highlight} Google: #{online_status} #{net_speed} SaveInterval: #{continuum_status} #[fg=red,bold]CPU: #{cpu_percentage} #[fg=#009100,bold]Battery: #{battery_percentage} #[fg=#BF0060]%a #[fg=#009393]%Y-%m-%d %H:%M:%S"

# }}


# --- 插件管理与配置 {{

# *** 安装插件管理工具:
#   git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#
# *** 基本使用方法:
#             I  安装新添加的插件.
#             U  更新插件.
#             u  卸载不在配置文件中的插件.

# *** TMUX plugin manager Begin.
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @tpm-clean 'u'  # 重新绑定卸载插件的快捷键.
# ==============================


# 在状态栏显示电量百分比.
set -g @plugin 'tmux-plugins/tmux-battery'


# 在状态栏显示 CPU 利用率.
set -g @plugin 'tmux-plugins/tmux-cpu'


# 按 prefix 或 prefix + [ 或 prefix + ctrl y 等按键的时候, 在状态栏高亮显示.
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_fg 'white'
set -g @prefix_highlight_bg 'blue'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr 'fg=black,bg=green'
# ctrl a  按 prefix 时, 由显示 ^B 改为显示 Wait, 表示等待输入命令.
set -g @prefix_highlight_prefix_prompt 'Wait'
# [  进入 copy 模式时, 显示 Copy.
set -g @prefix_highlight_copy_prompt 'Copy'
# ctrl y  进入窗格同步模式时, 显示 Sync. 
set -g @prefix_highlight_sync_prompt 'Sync'


# 在状态栏显示网络是否在线, 默认是通过 ping www.google.com 来检测网络连通性的,
# 可通过修改 ~/.tmux/plugins/tmux-online-status/scripts/online_status_icon.sh 来更改检测的域名.
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @online_icon "ok"
set -g @offline_icon "off"


# Ctrl-s  保存当前 session.
# Ctrl-r  由于服务器重启或 tmux kill-server 等原因导致丢失 session 后,
#         可以使用此命令恢复 session.
#
# NOTE: 不想恢复最近一次的保存, 想恢复到历史的某个保存的方法:
#       1) cd ~/.tmux/resurrect/
#       2) ln -sf <file_name> last
#       3) prefix + Ctrl r
set -g @plugin 'tmux-plugins/tmux-resurrect'
# 有了这个插件后, 我们就可以不用手动保存和恢复丢失的 session 了, 全部由此插件代劳.
set -g @plugin 'tmux-plugins/tmux-continuum'
# 每几分钟自动保存一次 session, 设置为0表示禁止自动保存功能.
set -g @continuum-save-interval '5'
# 丢失 session 后, 再次执行 tmux 时是否进行自动恢复 session.
set -g @continuum-restore 'on'
# 保存并恢复 vim/nvim 打开的状态.
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
# 如果使用的是 macvim(macOS), 需要使用下面这条配置来恢复 vim 打开状态.
set -g @resurrect-processes '~Vim -> vim'
# 保存并恢复窗格的内容.
set -g @resurrect-capture-pane-contents 'on'


# 使得可以搜索和复制命令行屏幕上的文本, 脱离繁琐的鼠标操作.
# ctrl f  进入 copy 模式, 光标跳转到命令行上方的文件名称并高亮显示选中文件名;
# ctrl g  进入 copy 模式, 用于 git status -sb 命令后, 选中列出的一个文件名称并高亮显示;
# ctrl u  进入 copy 模式, 光标跳转到命令行上方的 url 链接并高亮显示;
# ctrl d  进入 copy 模式, 光标跳转到命令行上方的数字并高亮显示;
#      /  进入字符串或正则搜索模式, 搜索命令行上方的文本并高亮显示;
#    n/N  向上/向下搜索文本.
#  enter  复制选中的文本.
# NOTE: 为了使 / 搜索命令好用, 系统上需要安装 grep 和 gawk,
#   brew install grep gawk
set -g @plugin 'tmux-plugins/tmux-copycat'
# ctrl h  进入 copy 模式, 选中命令行上方的 hash 地址, 比如在执行完 git log 命令后使用.
set -g @copycat_hash_search 'C-h'
# ctrl i  进入 copy 模式, 选中命令行上方的 IP 地址, 并高亮显示.
set -g @copycat_ip_search 'C-i'
# D  高亮选中每行开头的数字字符串, 一般用于 pgrep -lf processname 命令后,
#    用来快速选择 PID.
set -g @copycat_search_D '^[[:digit:]]+'


# 命令行文本复制插件.
# y  normal 模式下, 将命令行文本复制到系统剪贴板;
#    copy 模式下, 将通过 n/N 选择的高亮文本拷贝到系统剪贴板.
# Y  normal 模式下, 将窗格的当前工作目录文本拷贝到系统剪贴板;
#    copy 模式下, 将通过 n/N 选择的高亮文本直接复制并粘贴到命令行.
set -g @plugin 'tmux-plugins/tmux-yank'


# copy 模式下, 直接打开选中的文件或url, 或使用搜索引擎搜索选中的文本.
# o  直接使用相应的默认应用打开选中的文件或url.
# S  使用 google 搜索选中的字符串, 注意可使用 l 扩展选中的字符串.
# B  使用 bing 搜索选中的字符串.
set -g @plugin 'tmux-plugins/tmux-open'
set -g @open-B 'https://www.bing.com/search?q='
set -g @open-S 'https://www.google.com/search?q='


# ==============================
# TMUX plugin manager End.
run '~/.tmux/plugins/tpm/tpm'

# }}


# --- 使用技巧 {{

#        ctrl a  prefix 按键, 以下所有按键如果没有特殊说明, 都必须先按 prefix,
#                注意按完 prefix, 需要先松开按键, 再按其他的具体命令按键.
#             e  编辑 ~/.tmux.conf 配置文件.
#             K  查看 ~/.tmux.conf 文件中光标所在的对象的帮助文档.
#             r  source ~/.tmux.conf, 使之立即生效.
#             ?  查看 tmux 键绑定的帮助信息.
#             d  退出 tmux 客户端.
#             =  打开剪贴历史, 选择一条, 然后回车, 即可将选择的内容写入当前打开的文件.
#             S  显示/隐藏状态栏.
#
#   **** session 管理 ****
#        ctrl c  创建新的 session.
#             s  列出所有 session.
#        ctrl f  搜索 session.
#             $  重命名当前 session 名称.
#
#   **** 窗口管理 ****
#             c  新建一个窗口.
#             ,  重命名当前窗口.
#      esc && q  中止重命名窗口, 先按 esc, 再按 q 即可.
#           n/p  切换到下一个/上一个窗口.
#        number  切换到某个编号的窗口.
#             &  杀掉当前窗口.
#             w  列出所有 session 的所有窗口.
#
#   **** 窗格管理 ****
#             %  划分左右两个窗格.
#             "  划分上下两个窗格.
#             x  关闭当前窗格.
#          exit  在命令行执行 exit 也可以退出当前窗格, 如果当前窗格是窗口的最后一个窗格,
#                则窗口也同时关闭. NOTE: 不需要加 prefix.
#             z  全屏显示当前窗格, 或关闭全屏显示.
#             q  显示所有窗格编号.
#             t  在当前窗格显示时钟, 我们可以留一个小窗格安放时钟, 醒目的提醒我们时间.
#         space  切换窗格布局.
#          kjhl  将光标跳转到上/下/左/右窗格.
#             ;  将光标跳转到上一次光标所在的窗格.
#          KJHL  向上/下/左/右调整窗格大小.
#           >/<  和下一个/上一个窗格交换位置.
#        ctrl l  清空窗格屏幕的同时, 窗格的历史记录也被清除.
#                NOTE: 注意和不加 prefix 的 ctrl l 的区别,
#                不加 prefix 的 ctrl l 只清空当前窗格的屏幕,
#                窗格的历史内容记录还是保留的, 可以通过进入 copy 模式后进行浏览.
#
#   **** copy 模式 ****
#             [  进入到 copy 模式.
#             ]  将拷贝的文本进行粘贴.
#             q  退出 copy 模式.
#   NOTE: 以下命令均不需要加 prefix.
#          kjhl  光标上下左右移动.
#                远不止这些, 很多 vim 下的命令都可以在 copy 模式下使用.
#             v  使用该命令进行文本选择.
#       shift v  进行整行选择.
#        ctrl v  进行矩形选择, 按完 ctrl v 后, 需要再通过 v 进行选择.
#           esc  退出当前选择的文本, 这样就可以重新使用 v 进行选择了.
#             y  将选择的文本复制到系统剪贴板.
#     command v  将拷贝的文本进行粘贴.
#
#   **** sync 模式 ****
#        ctrl y  打开或关闭 sync 模式.
#
#   **** 插件能力 ****
#        ctrl f  进入 copy 模式, 光标跳转到命令行上方的文件名称并高亮显示选中文件名;
#        ctrl g  进入 copy 模式, 用于 git status -sb 命令后, 选中列出的一个文件名称并高亮显示;
#        ctrl u  进入 copy 模式, 光标跳转到命令行上方的 url 链接并高亮显示;
#        ctrl d  进入 copy 模式, 光标跳转到命令行上方的数字并高亮显示;
#             D  高亮选中每行开头的数字字符串, 一般用于 pgrep -lf processname 命令后, 用来快速选择复制 PID.
#        ctrl i  进入 copy 模式, 选中命令行上方的 IP 地址, 并高亮显示.
#        ctrl h  进入 copy 模式, 选中并高亮显示 sha1 字符串, 一般用于 git log | head -20 命令后.
#             q  退出 copy 模式.
#             /  进入字符串或正则搜索模式, 搜索命令行上方的文本并高亮显示;
#                这里有个技巧可以大面积复制屏幕上的文本内容:
#                   输入要复制的文本的开头的关键字, 回车后, 光标将定位到你输入的关键字,
#                   然后一直按 l 键扩大你要复制的文本范围, 
#                   然后按 y 即可将内容拷贝到系统剪贴板.
#           n/N  向上/向下搜索文本.
#         enter  复制选中的文本.
#             y  normal 模式下, 将命令行文本复制到系统剪贴板;
#                copy 模式下, 将通过 n/N 选择的高亮文本拷贝到系统剪贴板.
#             Y  normal 模式下, 将窗格的当前工作目录文本拷贝到系统剪贴板;
#                copy 模式下, 将通过 n/N 选择的高亮文本直接复制并粘贴到命令行.
#             o  copy 模式下, 直接使用相应的默认应用打开选中的文件或url.
#             S  copy 模式下, 使用 google 搜索选中的字符串, 注意可使用 l 扩展选中的字符串.
#             B  copy 模式下, 使用 bing 搜索选中的字符串.
#
#   **** 注意事项 ****
#            1)  有些情况下, 不管怎么修改配置文件, 都无法使配置生效, 解决方法:
#                tmux kill-server

# }}
